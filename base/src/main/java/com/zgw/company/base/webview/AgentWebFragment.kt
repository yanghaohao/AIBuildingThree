package com.zgw.company.base.webviewimport android.content.ClipDataimport android.content.ClipboardManagerimport android.content.Contextimport android.content.Intentimport android.graphics.Bitmapimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.text.TextUtilsimport android.view.KeyEventimport android.view.Viewimport android.view.ViewGroupimport android.webkit.*import android.widget.LinearLayoutimport android.widget.Toastimport androidx.annotation.RequiresApiimport androidx.appcompat.widget.PopupMenuimport com.google.gson.Gsonimport com.just.agentweb.*import com.safframework.log.Limport com.zgw.company.base.core.ui.BaseFragmentimport com.zgw.company.base.Rimport com.zgw.company.base.core.dalegate.viewModelDelegateimport com.zgw.company.base.dialog.ShareDialogimport com.zgw.company.base.core.http.URLParserimport kotlinx.android.synthetic.main.fragment_agentweb.*import java.util.HashMapopen class AgentWebFragment : BaseFragment(), FragmentKeyDown {    protected val model by viewModelDelegate(WebviewViewModel::class, true)    var mAgentWeb: AgentWeb? = null    private var mPopupMenu: PopupMenu? = null    private var mTitle: String? = null    protected var mUrl: String = ""        get() = URLParser(field).addParam("os", "0").toString()    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        mUrl = arguments?.getString(WebActivity.URL) ?: ""        mTitle = arguments?.getString(WebActivity.TITLE)    }    override fun getLayoutId(): Int {        return R.layout.fragment_agentweb    }    override fun initView(view: View) {        mAgentWeb = AgentWeb.with(this)            .setAgentWebParent(view as LinearLayout, -1, LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT))//传入AgentWeb的父控件。            .useDefaultIndicator(-1, 2)            .setAgentWebWebSettings(settings)            .setWebViewClient(mWebViewClient)            .setWebChromeClient(mWebChromeClient)            .setPermissionInterceptor(mPermissionInterceptor)            .setSecurityType(AgentWeb.SecurityType.STRICT_CHECK)            .setMainFrameErrorView(View.inflate(context, R.layout.view_error, null))            .useMiddlewareWebChrome(middlewareWebChrome)            .useMiddlewareWebClient(middlewareWebClient)            .setOpenOtherPageWays(DefaultWebClient.OpenOtherPageWays.DISALLOW)            .interceptUnkownUrl()            .createAgentWeb()            .ready()            .go(mUrl)        mAgentWeb?.webCreator?.webView?.overScrollMode = WebView.OVER_SCROLL_NEVER        initListener()    }    var mPermissionInterceptor: PermissionInterceptor = PermissionInterceptor { url, permissions, action ->        L.i(tag, "mUrl:" + url + "  permission:" + Gson().toJson(permissions) + " action:" + action)        false    }    /**     * @return IAgentWebSettings     */    val settings: IAgentWebSettings<*> = object : AbsAgentWebSettings() {        override fun bindAgentWebSupport(agentWeb: AgentWeb) {            this.mAgentWeb = agentWeb        }    }    var mWebChromeClient: WebChromeClient = object : WebChromeClient() {        override fun onReceivedTitle(view: WebView, title: String) {            var title = title            super.onReceivedTitle(view, title)            if (toolbar_title != null) {                if (!TextUtils.isEmpty(mTitle)) {                    if (mTitle!!.length > 25) {                        mTitle = mTitle!!.substring(0, 25) + "..."                    }                    toolbar_title.text = mTitle                } else if (!TextUtils.isEmpty(title)) {                    if (title.length > 25) {                        title = title.substring(0, 25) + "..."                    }                    toolbar_title.text = title                }            }        }        override fun onProgressChanged(view: WebView, newProgress: Int) {            super.onProgressChanged(view, newProgress)            if (view.canGoBack()) {                pageNavigator(View.VISIBLE)            } else {                pageNavigator(View.GONE)            }        }        override fun onConsoleMessage(consoleMessage: ConsoleMessage?): Boolean {            L.d("console", consoleMessage?.message())            return super.onConsoleMessage(consoleMessage)        }    }    var mWebViewClient: WebViewClient = object : WebViewClient() {        private val timer = HashMap<String, Long>()        @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)        override fun shouldOverrideUrlLoading(view: WebView, request: WebResourceRequest): Boolean {            return shouldOverrideUrlLoading(view, request.url.toString() + "")        }        override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {            return url.startsWith("intent://") && url.contains("com.youku.phone")        }        override fun onPageStarted(view: WebView, url: String, favicon: Bitmap?) {            timer[url] = System.currentTimeMillis()            if (url != mUrl && view.canGoBack()) {                pageNavigator(View.VISIBLE)            } else {                pageNavigator(View.GONE)            }        }        override fun onPageFinished(view: WebView, url: String) {            super.onPageFinished(view, url)            if (timer[url] != null) {                val overTime = System.currentTimeMillis()                val startTime = timer[url]                L.i(tag, " page mUrl1:" + url + "  used time:" + (overTime - startTime!!))            } else {                L.i(tag, " page mUrl2:$url")            }        }    }    private val mOnClickListener = View.OnClickListener { v ->        val i = v.id        if (i == R.id.iv_back) {            if (mAgentWeb != null && !mAgentWeb!!.back()) {                this@AgentWebFragment.activity?.finish()            }        } else if (i == R.id.iv_finish) {            this@AgentWebFragment.activity?.finish()        } else if (i == R.id.iv_more) {            ShareDialog.createBuilder(activity!!)        }    }    protected val middlewareWebClient: MiddlewareWebClientBase = object : MiddlewareWebClientBase() {        override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {            if (url.startsWith("agentweb")) {                L.i(tag, "agentweb scheme ~")                return true            }            return super.shouldOverrideUrlLoading(view, url)        }    }    protected val middlewareWebChrome: MiddlewareWebChromeBase = object : MiddlewareWebChromeBase() {        override fun onJsAlert(view: WebView, url: String, message: String, result: JsResult): Boolean {            L.i("Info", "onJsAlert:$url")            return super.onJsAlert(view, url, message, result)        }    }    protected fun initListener() {        iv_back.setOnClickListener(mOnClickListener)        iv_finish.setOnClickListener(mOnClickListener)        iv_more.setOnClickListener(mOnClickListener)        pageNavigator(View.GONE)    }    private fun pageNavigator(tag: Int) {        iv_back.visibility = tag        view_line.visibility = tag        view_line2.visibility = if (tag == View.GONE) View.VISIBLE else View.GONE    }    private fun openBrowser(targetUrl: String) {        if (TextUtils.isEmpty(targetUrl) || targetUrl.startsWith("file://")) {            Toast.makeText(this.context, "$targetUrl 该链接无法使用浏览器打开。", Toast.LENGTH_SHORT).show()            return        }        val intent = Intent()        intent.action = "android.intent.action.VIEW"        val mUri = Uri.parse(targetUrl)        intent.data = mUri        startActivity(intent)    }    private fun toCleanWebCache() {        this.mAgentWeb?.clearWebCache()    }    private fun toCopy(context: Context, text: String) {        val mClipboardManager = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager        mClipboardManager.setPrimaryClip(ClipData.newPlainText(null, text))    }    override fun onResume() {        super.onResume()        mAgentWeb?.webLifeCycle?.onResume()    }    override fun onPause() {        mAgentWeb?.webLifeCycle?.onPause()        super.onPause()    }    override fun onFragmentKeyDown(keyCode: Int, event: KeyEvent?): Boolean {        return if (mAgentWeb != null) {            mAgentWeb!!.handleKeyEvent(keyCode, event)        } else {            false        }    }    override fun onDestroy() {        toCleanWebCache()        mAgentWeb?.webLifeCycle?.onDestroy()        super.onDestroy()    }    companion object {        val tag: String = AgentWebFragment::class.java.simpleName        fun getInstance(bundle: Bundle?): AgentWebFragment {            val mAgentWebFragment = AgentWebFragment()            if (bundle != null) {                mAgentWebFragment.arguments = bundle            }            return mAgentWebFragment        }    }}