package com.zgw.company.base.core.utils.resultimport android.content.Intentimport androidx.appcompat.app.AppCompatActivityimport io.reactivex.Observableclass AndroidOnResult(activity: AppCompatActivity?) {    private val androidOnResultFragment: AndroidOnResultFragment    init {        androidOnResultFragment = getAndroidOnResultFragment(activity)    }    private fun getAndroidOnResultFragment(activity: AppCompatActivity?): AndroidOnResultFragment {        val tag = "com.zgw.company.base.core.utils.result.AndroidOnResult"        var resultFragment: AndroidOnResultFragment? = activity?.supportFragmentManager?.findFragmentByTag(tag) as AndroidOnResultFragment        if (resultFragment == null) {            resultFragment = AndroidOnResultFragment()            val fragmentManager = activity.supportFragmentManager            fragmentManager.beginTransaction().add(resultFragment, tag).commitAllowingStateLoss()            fragmentManager.executePendingTransactions()        }        return resultFragment    }    fun startForResult(intent: Intent): Observable<ActivityResultInfo> = androidOnResultFragment.startForResult(intent)    fun startForResult(clazz: Class<*>): Observable<ActivityResultInfo> = startForResult(Intent(androidOnResultFragment.activity, clazz))    fun startForResult(intent: Intent, callback: (resultCode: Int, data: Intent?) -> Unit) {        androidOnResultFragment.startForResult(intent, callback)    }    fun startForResult(clazz: Class<*>, callback: (resultCode: Int, data: Intent?) -> Unit) {        val intent = Intent(androidOnResultFragment.activity, clazz)        startForResult(intent, callback)    }}class ActivityResultInfo(var resultCode: Int, var data: Intent?)