package com.zgw.company.base.core.utils.resultimport android.content.Intentimport android.os.Bundleimport androidx.fragment.app.Fragmentimport io.reactivex.Observableimport io.reactivex.subjects.PublishSubjectclass AndroidOnResultFragment : Fragment() {    private val mSubjects = hashMapOf<Int, PublishSubject<ActivityResultInfo>>()    private val mCallbacks = hashMapOf<Int, (resultCode: Int, data: Intent?) -> Unit>()    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        retainInstance = true    }    fun startForResult(intent: Intent): Observable<ActivityResultInfo> {        val subject = PublishSubject.create<ActivityResultInfo>()        return subject.doOnSubscribe {            mSubjects[subject.hashCode()] = subject            startActivityForResult(intent, subject.hashCode())        }    }    fun startForResult(intent: Intent, callback: (resultCode: Int, data: Intent?) -> Unit) {        mCallbacks[callback.hashCode()] = callback        startActivityForResult(intent, callback.hashCode())    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        val subject = mSubjects.remove(requestCode)        if (subject != null) {            subject.onNext(ActivityResultInfo(resultCode, data))            subject.onComplete()        }        val callback = mCallbacks.remove(requestCode)        callback?.let { it(resultCode, data) }    }}